// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.2.1.6 by WSRD Tencent.
// Generated from `LogReport.jce'
// **********************************************************************

package TRom.log;

import java.util.concurrent.Semaphore;
import qrom.component.wup.QRomWupConstants.WUP_ERROR_CODE;
import qrom.component.wup.apiv2.AsyncWupMethod;
import qrom.component.wup.apiv2.AsyncWupOption;
import qrom.component.wup.apiv2.OutWrapper;
import qrom.component.wup.apiv2.WupBaseResult;
import qrom.component.wup.apiv2.WupException;
import qrom.component.wup.apiv2.WupHandle;
import qrom.component.wup.apiv2.WupOption;
import qrom.component.wup.apiv2.WupOption.WupType;
import com.qq.jce.wup.UniPacket;

public class LogReportStubAndroid {

    private String mServantName;
    public LogReportStubAndroid(String servantName) {
        this.mServantName = servantName;
    }

    public String getServantName() {
        return mServantName;
    }

    public static class GetTicketResult extends WupBaseResult {
        public GetTicketResult() {
        }

        public GetTicketResult(int errorCode, String errorMsg) {
            super(errorCode, errorMsg);
        }

        TRom.log.GetTicketReq inReq;
        public TRom.log.GetTicketReq getReq() {
            return inReq;
        }
        public GetTicketResult setReq(TRom.log.GetTicketReq req) {
            this.inReq = req;
            return this;
        }

        TRom.log.GetTicketRsp outRsp;
        public TRom.log.GetTicketRsp getRsp() {
            return outRsp;
        }
        public GetTicketResult setRsp(TRom.log.GetTicketRsp rsp) {
            this.outRsp = rsp;
            return this;
        }

        int ret;
        public int getRet() {
             return ret;
        }
        public GetTicketResult setRet(int ret) {
            this.ret = ret;
            return this;
        }

    }

    public static interface IGetTicketCallback {
        public void onGetTicketCallback(GetTicketResult result);
    }

    private static abstract class GetTicketBaseMethod extends AsyncWupMethod {
        public GetTicketBaseMethod(String servantName, AsyncWupOption wupOption) {
            super(servantName, "getTicket", wupOption);
        }

        TRom.log.GetTicketReq inReq;
        public TRom.log.GetTicketReq getReq() {
            return inReq;
        }
        public void setReq(TRom.log.GetTicketReq req) {
            this.inReq = req;
        }

        TRom.log.GetTicketRsp outRsp;
        public TRom.log.GetTicketRsp getRsp() {
            return outRsp;
        }

        int ret;
        public int getRet() {
             return ret;
        }

        @Override
        protected void fillReqUniPacket(UniPacket reqPacket) {
            reqPacket.put("req", inReq);
        }

        @Override
        protected void fillFieldsByUniPacket(UniPacket respPacket) {
            if (mWupOption.isUseUniPacketV3()) {
                ret = respPacket.getByClass("", Integer.valueOf(0));
                outRsp = respPacket.getByClass("rsp", new TRom.log.GetTicketRsp());
                return ;
            }
            ret = respPacket.get("");
            outRsp = respPacket.get("rsp");
        }

    }

    private static class AsyncGetTicketMethod extends GetTicketBaseMethod {
        private IGetTicketCallback mGetTicketCallback;
        public AsyncGetTicketMethod(String servantName, AsyncWupOption wupOption, IGetTicketCallback getTicketCallback) {
            super(servantName, wupOption);
            this.mGetTicketCallback = getTicketCallback;
        }

        @Override
        protected void onError(int errorCode, String errorMsg) {
        	GetTicketResult result = new GetTicketResult(errorCode, errorMsg);
        	result.setRequestId(getRequestId());
            mGetTicketCallback.onGetTicketCallback(result);
        }

        @Override
        protected void onFinished() {
            GetTicketResult result = new GetTicketResult();
            result.setRequestId(getRequestId());
            result.setReq(getReq());
            result.setRsp(getRsp());
            result.setRet(getRet());
            mGetTicketCallback.onGetTicketCallback(result);
        }

    }

    private static class SyncGetTicketMethod extends GetTicketBaseMethod {
        private Semaphore mSemaphore;
        private WupException mWupException;
        public SyncGetTicketMethod(String servantName, AsyncWupOption wupOption) {
            super(servantName, wupOption);
            mSemaphore = new Semaphore(0);
        }

        public void waitResponse() throws InterruptedException {
            mSemaphore.acquire();
        }

        @Override
        protected void handleFinished() {
            mSemaphore.release();
        }

        @Override
        protected void handleError(final int errorCode, final String errorMsg) {
            mWupException = new WupException(errorCode, errorMsg);
            mSemaphore.release();
        }

        public WupException getWupException() {
            return mWupException;
        }

    }

    public WupHandle asyncGetTicket(TRom.log.GetTicketReq inReq, IGetTicketCallback getTicketCallback) throws WupException { 
        return asyncGetTicket(inReq, getTicketCallback, new AsyncWupOption(WupType.WUP_NORMAL_REQUEST));
    }

    public WupHandle asyncGetTicket(TRom.log.GetTicketReq inReq, IGetTicketCallback getTicketCallback, AsyncWupOption option) throws WupException{
        if (getTicketCallback == null) {
            throw new IllegalArgumentException("getTicketCallback should not be null");
        }
        if (option == null) {
            throw new IllegalArgumentException("option should not be null");
        }

        if (inReq == null) {
            throw new IllegalArgumentException("inReq should not be null");
        }

        AsyncGetTicketMethod getTicketMethod = new AsyncGetTicketMethod(getServantName(), option, getTicketCallback);
        getTicketMethod.setReq(inReq);
        getTicketMethod.start();
        return new WupHandle(getTicketMethod);
    }

    public int getTicket(TRom.log.GetTicketReq inReq, OutWrapper<TRom.log.GetTicketRsp> outRsp) throws WupException {
        return getTicket(inReq, outRsp, new WupOption(WupOption.WupType.WUP_NORMAL_REQUEST));
    }

    public int getTicket(TRom.log.GetTicketReq inReq, OutWrapper<TRom.log.GetTicketRsp> outRsp, WupOption option) throws WupException {
        if (option == null) {
            throw new IllegalArgumentException("option should not be null");
        }

        if (inReq == null) {
            throw new IllegalArgumentException("inReq should not be null");
        }

        if (outRsp == null) {
            throw new IllegalArgumentException("outRsp should not be null");
        }

        SyncGetTicketMethod syncGetTicketMethod = new SyncGetTicketMethod(getServantName(), new AsyncWupOption(option, null));
        syncGetTicketMethod.setReq(inReq);
        syncGetTicketMethod.start();

        try {
            syncGetTicketMethod.waitResponse();
        } catch (InterruptedException e) {
            throw new WupException(WUP_ERROR_CODE.WUP_INNER_ERROR, e.getMessage());
        }

        if (syncGetTicketMethod.getWupException() != null) {
            throw syncGetTicketMethod.getWupException();
        }

        outRsp.setOut(syncGetTicketMethod.getRsp());
        return syncGetTicketMethod.getRet();
    }

    public static class ReportLogResult extends WupBaseResult {
        public ReportLogResult() {
        }

        public ReportLogResult(int errorCode, String errorMsg) {
            super(errorCode, errorMsg);
        }

        TRom.log.ReportLogReq inReq;
        public TRom.log.ReportLogReq getReq() {
            return inReq;
        }
        public ReportLogResult setReq(TRom.log.ReportLogReq req) {
            this.inReq = req;
            return this;
        }

        TRom.log.ReportLogRsp outRsp;
        public TRom.log.ReportLogRsp getRsp() {
            return outRsp;
        }
        public ReportLogResult setRsp(TRom.log.ReportLogRsp rsp) {
            this.outRsp = rsp;
            return this;
        }

        int ret;
        public int getRet() {
             return ret;
        }
        public ReportLogResult setRet(int ret) {
            this.ret = ret;
            return this;
        }

    }

    public static interface IReportLogCallback {
        public void onReportLogCallback(ReportLogResult result);
    }

    private static abstract class ReportLogBaseMethod extends AsyncWupMethod {
        public ReportLogBaseMethod(String servantName, AsyncWupOption wupOption) {
            super(servantName, "reportLog", wupOption);
        }

        TRom.log.ReportLogReq inReq;
        public TRom.log.ReportLogReq getReq() {
            return inReq;
        }
        public void setReq(TRom.log.ReportLogReq req) {
            this.inReq = req;
        }

        TRom.log.ReportLogRsp outRsp;
        public TRom.log.ReportLogRsp getRsp() {
            return outRsp;
        }

        int ret;
        public int getRet() {
             return ret;
        }

        @Override
        protected void fillReqUniPacket(UniPacket reqPacket) {
            reqPacket.put("req", inReq);
        }

        @Override
        protected void fillFieldsByUniPacket(UniPacket respPacket) {
            if (mWupOption.isUseUniPacketV3()) {
                ret = respPacket.getByClass("", Integer.valueOf(0));
                outRsp = respPacket.getByClass("rsp", new TRom.log.ReportLogRsp());
                return ;
            }
            ret = respPacket.get("");
            outRsp = respPacket.get("rsp");
        }

    }

    private static class AsyncReportLogMethod extends ReportLogBaseMethod {
        private IReportLogCallback mReportLogCallback;
        public AsyncReportLogMethod(String servantName, AsyncWupOption wupOption, IReportLogCallback reportLogCallback) {
            super(servantName, wupOption);
            this.mReportLogCallback = reportLogCallback;
        }

        @Override
        protected void onError(int errorCode, String errorMsg) {
            mReportLogCallback.onReportLogCallback(new ReportLogResult(errorCode, errorMsg));
        }

        @Override
        protected void onFinished() {
            ReportLogResult result = new ReportLogResult();
            result.setReq(getReq());
            result.setRsp(getRsp());
            result.setRet(getRet());
            mReportLogCallback.onReportLogCallback(result);
        }

    }

    private static class SyncReportLogMethod extends ReportLogBaseMethod {
        private Semaphore mSemaphore;
        private WupException mWupException;
        public SyncReportLogMethod(String servantName, AsyncWupOption wupOption) {
            super(servantName, wupOption);
            mSemaphore = new Semaphore(0);
        }

        public void waitResponse() throws InterruptedException {
            mSemaphore.acquire();
        }

        @Override
        protected void handleFinished() {
            mSemaphore.release();
        }

        @Override
        protected void handleError(final int errorCode, final String errorMsg) {
            mWupException = new WupException(errorCode, errorMsg);
            mSemaphore.release();
        }

        public WupException getWupException() {
            return mWupException;
        }

    }

    public WupHandle asyncReportLog(TRom.log.ReportLogReq inReq, IReportLogCallback reportLogCallback) throws WupException { 
        return asyncReportLog(inReq, reportLogCallback, new AsyncWupOption(WupType.WUP_NORMAL_REQUEST));
    }

    public WupHandle asyncReportLog(TRom.log.ReportLogReq inReq, IReportLogCallback reportLogCallback, AsyncWupOption option) throws WupException{
        if (reportLogCallback == null) {
            throw new IllegalArgumentException("reportLogCallback should not be null");
        }
        if (option == null) {
            throw new IllegalArgumentException("option should not be null");
        }

        if (inReq == null) {
            throw new IllegalArgumentException("inReq should not be null");
        }

        AsyncReportLogMethod reportLogMethod = new AsyncReportLogMethod(getServantName(), option, reportLogCallback);
        reportLogMethod.setReq(inReq);
        reportLogMethod.start();
        return new WupHandle(reportLogMethod);
    }

    public int reportLog(TRom.log.ReportLogReq inReq, OutWrapper<TRom.log.ReportLogRsp> outRsp) throws WupException {
        return reportLog(inReq, outRsp, new WupOption(WupOption.WupType.WUP_NORMAL_REQUEST));
    }

    public int reportLog(TRom.log.ReportLogReq inReq, OutWrapper<TRom.log.ReportLogRsp> outRsp, WupOption option) throws WupException {
        if (option == null) {
            throw new IllegalArgumentException("option should not be null");
        }

        if (inReq == null) {
            throw new IllegalArgumentException("inReq should not be null");
        }

        if (outRsp == null) {
            throw new IllegalArgumentException("outRsp should not be null");
        }

        SyncReportLogMethod syncReportLogMethod = new SyncReportLogMethod(getServantName(), new AsyncWupOption(option, null));
        syncReportLogMethod.setReq(inReq);
        syncReportLogMethod.start();

        try {
            syncReportLogMethod.waitResponse();
        } catch (InterruptedException e) {
            throw new WupException(WUP_ERROR_CODE.WUP_INNER_ERROR, e.getMessage());
        }

        if (syncReportLogMethod.getWupException() != null) {
            throw syncReportLogMethod.getWupException();
        }

        outRsp.setOut(syncReportLogMethod.getRsp());
        return syncReportLogMethod.getRet();
    }

}

