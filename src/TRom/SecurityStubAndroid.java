// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.2.1.4 by WSRD Tencent.
// Generated from `/usr/local/app/taf/tafnode/data/Test.GetJceJavaServer/bin//doc/upload/20150813/Security.jce'
// **********************************************************************

package TRom;

import java.util.concurrent.Semaphore;
import qrom.component.wup.QRomWupConstants.WUP_ERROR_CODE;
import qrom.component.wup.apiv2.AsyncWupMethod;
import qrom.component.wup.apiv2.AsyncWupOption;
import qrom.component.wup.apiv2.OutWrapper;
import qrom.component.wup.apiv2.WupBaseResult;
import qrom.component.wup.apiv2.WupException;
import qrom.component.wup.apiv2.WupHandle;
import qrom.component.wup.apiv2.WupOption;
import qrom.component.wup.apiv2.WupOption.WupType;
import com.qq.jce.wup.UniPacket;

public class SecurityStubAndroid {

    private String mServantName;
    public SecurityStubAndroid(String servantName) {
        this.mServantName = servantName;
    }

    public String getServantName() {
        return mServantName;
    }

    public static class BeginSessionResult extends WupBaseResult {
        public BeginSessionResult() {
        }

        public BeginSessionResult(int errorCode, String errorMsg) {
            super(errorCode, errorMsg);
        }

        TRom.SecSessionReq inReq;
        public TRom.SecSessionReq getReq() {
            return inReq;
        }
        public BeginSessionResult setReq(TRom.SecSessionReq req) {
            this.inReq = req;
            return this;
        }

        TRom.SecSessionRsp outRsp;
        public TRom.SecSessionRsp getRsp() {
            return outRsp;
        }
        public BeginSessionResult setRsp(TRom.SecSessionRsp rsp) {
            this.outRsp = rsp;
            return this;
        }

        int ret;
        public int getRet() {
             return ret;
        }
        public BeginSessionResult setRet(int ret) {
            this.ret = ret;
            return this;
        }

    }

    public static interface IBeginSessionCallback {
        public void onBeginSessionCallback(BeginSessionResult result);
    }

    private static abstract class BeginSessionBaseMethod extends AsyncWupMethod {
        public BeginSessionBaseMethod(String servantName, AsyncWupOption wupOption) {
            super(servantName, "beginSession", wupOption);
        }

        TRom.SecSessionReq inReq;
        public TRom.SecSessionReq getReq() {
            return inReq;
        }
        public void setReq(TRom.SecSessionReq req) {
            this.inReq = req;
        }

        TRom.SecSessionRsp outRsp;
        public TRom.SecSessionRsp getRsp() {
            return outRsp;
        }

        int ret;
        public int getRet() {
             return ret;
        }

        @Override
        protected void fillReqUniPacket(UniPacket reqPacket) {
            reqPacket.put("req", inReq);
        }

        @Override
        protected void fillFieldsByUniPacket(UniPacket respPacket) {
            if (mWupOption.isUseUniPacketV3()) {
                ret = respPacket.getByClass("", Integer.valueOf(0));
                outRsp = respPacket.getByClass("rsp", new TRom.SecSessionRsp());
                return ;
            }
            ret = (Integer)respPacket.get("");
            outRsp = (TRom.SecSessionRsp)respPacket.get("rsp");
        }

    }

    private static class AsyncBeginSessionMethod extends BeginSessionBaseMethod {
        private IBeginSessionCallback mBeginSessionCallback;
        public AsyncBeginSessionMethod(String servantName, AsyncWupOption wupOption, IBeginSessionCallback beginSessionCallback) {
            super(servantName, wupOption);
            this.mBeginSessionCallback = beginSessionCallback;
        }

        @Override
        protected void onError(int errorCode, String errorMsg) {
            BeginSessionResult result = new BeginSessionResult(errorCode, errorMsg);
            result.setRequestId(getRequestId());
            mBeginSessionCallback.onBeginSessionCallback(result);
        }

        @Override
        protected void onFinished() {
            BeginSessionResult result = new BeginSessionResult();
            result.setRequestId(getRequestId());
            result.setReq(getReq());
            result.setRsp(getRsp());
            result.setRet(getRet());
            mBeginSessionCallback.onBeginSessionCallback(result);
        }

    }

    private static class SyncBeginSessionMethod extends BeginSessionBaseMethod {
        private Semaphore mSemaphore;
        private WupException mWupException;
        public SyncBeginSessionMethod(String servantName, AsyncWupOption wupOption) {
            super(servantName, wupOption);
            mSemaphore = new Semaphore(0);
        }

        public void waitResponse() throws InterruptedException {
            mSemaphore.acquire();
        }

        @Override
        protected void handleFinished() {
            mSemaphore.release();
        }

        @Override
        protected void handleError(final int errorCode, final String errorMsg) {
            mWupException = new WupException(errorCode, errorMsg);
            mSemaphore.release();
        }

        public WupException getWupException() {
            return mWupException;
        }

    }

    public WupHandle asyncBeginSession(TRom.SecSessionReq inReq, IBeginSessionCallback beginSessionCallback) throws WupException { 
        return asyncBeginSession(inReq, beginSessionCallback, new AsyncWupOption(WupType.WUP_NORMAL_REQUEST));
    }

    public WupHandle asyncBeginSession(TRom.SecSessionReq inReq, IBeginSessionCallback beginSessionCallback, AsyncWupOption option) throws WupException{
        if (beginSessionCallback == null) {
            throw new IllegalArgumentException("beginSessionCallback should not be null");
        }
        if (option == null) {
            throw new IllegalArgumentException("option should not be null");
        }

        if (inReq == null) {
            throw new IllegalArgumentException("inReq should not be null");
        }

        AsyncBeginSessionMethod beginSessionMethod = new AsyncBeginSessionMethod(getServantName(), option, beginSessionCallback);
        beginSessionMethod.setReq(inReq);
        beginSessionMethod.start();
        return new WupHandle(beginSessionMethod);
    }

    public int beginSession(TRom.SecSessionReq inReq, OutWrapper<TRom.SecSessionRsp> outRsp) throws WupException {
        return beginSession(inReq, outRsp, new WupOption(WupOption.WupType.WUP_NORMAL_REQUEST));
    }

    public int beginSession(TRom.SecSessionReq inReq, OutWrapper<TRom.SecSessionRsp> outRsp, WupOption option) throws WupException {
        if (option == null) {
            throw new IllegalArgumentException("option should not be null");
        }

        if (inReq == null) {
            throw new IllegalArgumentException("inReq should not be null");
        }

        if (outRsp == null) {
            throw new IllegalArgumentException("outRsp should not be null");
        }

        SyncBeginSessionMethod syncBeginSessionMethod = new SyncBeginSessionMethod(getServantName(), new AsyncWupOption(option, null));
        syncBeginSessionMethod.setReq(inReq);
        syncBeginSessionMethod.start();

        try {
            syncBeginSessionMethod.waitResponse();
        } catch (InterruptedException e) {
            throw new WupException(WUP_ERROR_CODE.WUP_INNER_ERROR, e.getMessage());
        }

        if (syncBeginSessionMethod.getWupException() != null) {
            throw syncBeginSessionMethod.getWupException();
        }

        outRsp.setOut(syncBeginSessionMethod.getRsp());
        return syncBeginSessionMethod.getRet();
    }

    public static class GetPublicKeyResult extends WupBaseResult {
        public GetPublicKeyResult() {
        }

        public GetPublicKeyResult(int errorCode, String errorMsg) {
            super(errorCode, errorMsg);
        }

        TRom.SecPublicKeyReq inReq;
        public TRom.SecPublicKeyReq getReq() {
            return inReq;
        }
        public GetPublicKeyResult setReq(TRom.SecPublicKeyReq req) {
            this.inReq = req;
            return this;
        }

        TRom.SecPublicKeyRsp outRsp;
        public TRom.SecPublicKeyRsp getRsp() {
            return outRsp;
        }
        public GetPublicKeyResult setRsp(TRom.SecPublicKeyRsp rsp) {
            this.outRsp = rsp;
            return this;
        }

        int ret;
        public int getRet() {
             return ret;
        }
        public GetPublicKeyResult setRet(int ret) {
            this.ret = ret;
            return this;
        }

    }

    public static interface IGetPublicKeyCallback {
        public void onGetPublicKeyCallback(GetPublicKeyResult result);
    }

    private static abstract class GetPublicKeyBaseMethod extends AsyncWupMethod {
        public GetPublicKeyBaseMethod(String servantName, AsyncWupOption wupOption) {
            super(servantName, "getPublicKey", wupOption);
        }

        TRom.SecPublicKeyReq inReq;
        public TRom.SecPublicKeyReq getReq() {
            return inReq;
        }
        public void setReq(TRom.SecPublicKeyReq req) {
            this.inReq = req;
        }

        TRom.SecPublicKeyRsp outRsp;
        public TRom.SecPublicKeyRsp getRsp() {
            return outRsp;
        }

        int ret;
        public int getRet() {
             return ret;
        }

        @Override
        protected void fillReqUniPacket(UniPacket reqPacket) {
            reqPacket.put("req", inReq);
        }

        @Override
        protected void fillFieldsByUniPacket(UniPacket respPacket) {
            if (mWupOption.isUseUniPacketV3()) {
                ret = respPacket.getByClass("", Integer.valueOf(0));
                outRsp = respPacket.getByClass("rsp", new TRom.SecPublicKeyRsp());
                return ;
            }
            ret = (Integer)respPacket.get("");
            outRsp = (TRom.SecPublicKeyRsp)respPacket.get("rsp");
        }

    }

    private static class AsyncGetPublicKeyMethod extends GetPublicKeyBaseMethod {
        private IGetPublicKeyCallback mGetPublicKeyCallback;
        public AsyncGetPublicKeyMethod(String servantName, AsyncWupOption wupOption, IGetPublicKeyCallback getPublicKeyCallback) {
            super(servantName, wupOption);
            this.mGetPublicKeyCallback = getPublicKeyCallback;
        }

        @Override
        protected void onError(int errorCode, String errorMsg) {
            GetPublicKeyResult result = new GetPublicKeyResult(errorCode, errorMsg);
            result.setRequestId(getRequestId());
            mGetPublicKeyCallback.onGetPublicKeyCallback(result);
        }

        @Override
        protected void onFinished() {
            GetPublicKeyResult result = new GetPublicKeyResult();
            result.setRequestId(getRequestId());
            result.setReq(getReq());
            result.setRsp(getRsp());
            result.setRet(getRet());
            mGetPublicKeyCallback.onGetPublicKeyCallback(result);
        }

    }

    private static class SyncGetPublicKeyMethod extends GetPublicKeyBaseMethod {
        private Semaphore mSemaphore;
        private WupException mWupException;
        public SyncGetPublicKeyMethod(String servantName, AsyncWupOption wupOption) {
            super(servantName, wupOption);
            mSemaphore = new Semaphore(0);
        }

        public void waitResponse() throws InterruptedException {
            mSemaphore.acquire();
        }

        @Override
        protected void handleFinished() {
            mSemaphore.release();
        }

        @Override
        protected void handleError(final int errorCode, final String errorMsg) {
            mWupException = new WupException(errorCode, errorMsg);
            mSemaphore.release();
        }

        public WupException getWupException() {
            return mWupException;
        }

    }

    public WupHandle asyncGetPublicKey(TRom.SecPublicKeyReq inReq, IGetPublicKeyCallback getPublicKeyCallback) throws WupException { 
        return asyncGetPublicKey(inReq, getPublicKeyCallback, new AsyncWupOption(WupType.WUP_NORMAL_REQUEST));
    }

    public WupHandle asyncGetPublicKey(TRom.SecPublicKeyReq inReq, IGetPublicKeyCallback getPublicKeyCallback, AsyncWupOption option) throws WupException{
        if (getPublicKeyCallback == null) {
            throw new IllegalArgumentException("getPublicKeyCallback should not be null");
        }
        if (option == null) {
            throw new IllegalArgumentException("option should not be null");
        }

        if (inReq == null) {
            throw new IllegalArgumentException("inReq should not be null");
        }

        AsyncGetPublicKeyMethod getPublicKeyMethod = new AsyncGetPublicKeyMethod(getServantName(), option, getPublicKeyCallback);
        getPublicKeyMethod.setReq(inReq);
        getPublicKeyMethod.start();
        return new WupHandle(getPublicKeyMethod);
    }

    public int getPublicKey(TRom.SecPublicKeyReq inReq, OutWrapper<TRom.SecPublicKeyRsp> outRsp) throws WupException {
        return getPublicKey(inReq, outRsp, new WupOption(WupOption.WupType.WUP_NORMAL_REQUEST));
    }

    public int getPublicKey(TRom.SecPublicKeyReq inReq, OutWrapper<TRom.SecPublicKeyRsp> outRsp, WupOption option) throws WupException {
        if (option == null) {
            throw new IllegalArgumentException("option should not be null");
        }

        if (inReq == null) {
            throw new IllegalArgumentException("inReq should not be null");
        }

        if (outRsp == null) {
            throw new IllegalArgumentException("outRsp should not be null");
        }

        SyncGetPublicKeyMethod syncGetPublicKeyMethod = new SyncGetPublicKeyMethod(getServantName(), new AsyncWupOption(option, null));
        syncGetPublicKeyMethod.setReq(inReq);
        syncGetPublicKeyMethod.start();

        try {
            syncGetPublicKeyMethod.waitResponse();
        } catch (InterruptedException e) {
            throw new WupException(WUP_ERROR_CODE.WUP_INNER_ERROR, e.getMessage());
        }

        if (syncGetPublicKeyMethod.getWupException() != null) {
            throw syncGetPublicKeyMethod.getWupException();
        }

        outRsp.setOut(syncGetPublicKeyMethod.getRsp());
        return syncGetPublicKeyMethod.getRet();
    }

    public static class GetSessionInfoResult extends WupBaseResult {
        public GetSessionInfoResult() {
        }

        public GetSessionInfoResult(int errorCode, String errorMsg) {
            super(errorCode, errorMsg);
        }

        TRom.SessionInfoReq inReq;
        public TRom.SessionInfoReq getReq() {
            return inReq;
        }
        public GetSessionInfoResult setReq(TRom.SessionInfoReq req) {
            this.inReq = req;
            return this;
        }

        TRom.SessionInfoRsp outRsp;
        public TRom.SessionInfoRsp getRsp() {
            return outRsp;
        }
        public GetSessionInfoResult setRsp(TRom.SessionInfoRsp rsp) {
            this.outRsp = rsp;
            return this;
        }

        int ret;
        public int getRet() {
             return ret;
        }
        public GetSessionInfoResult setRet(int ret) {
            this.ret = ret;
            return this;
        }

    }

    public static interface IGetSessionInfoCallback {
        public void onGetSessionInfoCallback(GetSessionInfoResult result);
    }

    private static abstract class GetSessionInfoBaseMethod extends AsyncWupMethod {
        public GetSessionInfoBaseMethod(String servantName, AsyncWupOption wupOption) {
            super(servantName, "getSessionInfo", wupOption);
        }

        TRom.SessionInfoReq inReq;
        public TRom.SessionInfoReq getReq() {
            return inReq;
        }
        public void setReq(TRom.SessionInfoReq req) {
            this.inReq = req;
        }

        TRom.SessionInfoRsp outRsp;
        public TRom.SessionInfoRsp getRsp() {
            return outRsp;
        }

        int ret;
        public int getRet() {
             return ret;
        }

        @Override
        protected void fillReqUniPacket(UniPacket reqPacket) {
            reqPacket.put("req", inReq);
        }

        @Override
        protected void fillFieldsByUniPacket(UniPacket respPacket) {
            if (mWupOption.isUseUniPacketV3()) {
                ret = respPacket.getByClass("", Integer.valueOf(0));
                outRsp = respPacket.getByClass("rsp", new TRom.SessionInfoRsp());
                return ;
            }
            ret = (Integer)respPacket.get("");
            outRsp = (TRom.SessionInfoRsp)respPacket.get("rsp");
        }

    }

    private static class AsyncGetSessionInfoMethod extends GetSessionInfoBaseMethod {
        private IGetSessionInfoCallback mGetSessionInfoCallback;
        public AsyncGetSessionInfoMethod(String servantName, AsyncWupOption wupOption, IGetSessionInfoCallback getSessionInfoCallback) {
            super(servantName, wupOption);
            this.mGetSessionInfoCallback = getSessionInfoCallback;
        }

        @Override
        protected void onError(int errorCode, String errorMsg) {
            GetSessionInfoResult result = new GetSessionInfoResult(errorCode, errorMsg);
            result.setRequestId(getRequestId());
            mGetSessionInfoCallback.onGetSessionInfoCallback(result);
        }

        @Override
        protected void onFinished() {
            GetSessionInfoResult result = new GetSessionInfoResult();
            result.setRequestId(getRequestId());
            result.setReq(getReq());
            result.setRsp(getRsp());
            result.setRet(getRet());
            mGetSessionInfoCallback.onGetSessionInfoCallback(result);
        }

    }

    private static class SyncGetSessionInfoMethod extends GetSessionInfoBaseMethod {
        private Semaphore mSemaphore;
        private WupException mWupException;
        public SyncGetSessionInfoMethod(String servantName, AsyncWupOption wupOption) {
            super(servantName, wupOption);
            mSemaphore = new Semaphore(0);
        }

        public void waitResponse() throws InterruptedException {
            mSemaphore.acquire();
        }

        @Override
        protected void handleFinished() {
            mSemaphore.release();
        }

        @Override
        protected void handleError(final int errorCode, final String errorMsg) {
            mWupException = new WupException(errorCode, errorMsg);
            mSemaphore.release();
        }

        public WupException getWupException() {
            return mWupException;
        }

    }

    public WupHandle asyncGetSessionInfo(TRom.SessionInfoReq inReq, IGetSessionInfoCallback getSessionInfoCallback) throws WupException { 
        return asyncGetSessionInfo(inReq, getSessionInfoCallback, new AsyncWupOption(WupType.WUP_NORMAL_REQUEST));
    }

    public WupHandle asyncGetSessionInfo(TRom.SessionInfoReq inReq, IGetSessionInfoCallback getSessionInfoCallback, AsyncWupOption option) throws WupException{
        if (getSessionInfoCallback == null) {
            throw new IllegalArgumentException("getSessionInfoCallback should not be null");
        }
        if (option == null) {
            throw new IllegalArgumentException("option should not be null");
        }

        if (inReq == null) {
            throw new IllegalArgumentException("inReq should not be null");
        }

        AsyncGetSessionInfoMethod getSessionInfoMethod = new AsyncGetSessionInfoMethod(getServantName(), option, getSessionInfoCallback);
        getSessionInfoMethod.setReq(inReq);
        getSessionInfoMethod.start();
        return new WupHandle(getSessionInfoMethod);
    }

    public int getSessionInfo(TRom.SessionInfoReq inReq, OutWrapper<TRom.SessionInfoRsp> outRsp) throws WupException {
        return getSessionInfo(inReq, outRsp, new WupOption(WupOption.WupType.WUP_NORMAL_REQUEST));
    }

    public int getSessionInfo(TRom.SessionInfoReq inReq, OutWrapper<TRom.SessionInfoRsp> outRsp, WupOption option) throws WupException {
        if (option == null) {
            throw new IllegalArgumentException("option should not be null");
        }

        if (inReq == null) {
            throw new IllegalArgumentException("inReq should not be null");
        }

        if (outRsp == null) {
            throw new IllegalArgumentException("outRsp should not be null");
        }

        SyncGetSessionInfoMethod syncGetSessionInfoMethod = new SyncGetSessionInfoMethod(getServantName(), new AsyncWupOption(option, null));
        syncGetSessionInfoMethod.setReq(inReq);
        syncGetSessionInfoMethod.start();

        try {
            syncGetSessionInfoMethod.waitResponse();
        } catch (InterruptedException e) {
            throw new WupException(WUP_ERROR_CODE.WUP_INNER_ERROR, e.getMessage());
        }

        if (syncGetSessionInfoMethod.getWupException() != null) {
            throw syncGetSessionInfoMethod.getWupException();
        }

        outRsp.setOut(syncGetSessionInfoMethod.getRsp());
        return syncGetSessionInfoMethod.getRet();
    }

    public static class GetUserEncryptKeyResult extends WupBaseResult {
        public GetUserEncryptKeyResult() {
        }

        public GetUserEncryptKeyResult(int errorCode, String errorMsg) {
            super(errorCode, errorMsg);
        }

        TRom.UserEncryptKeyReq inReq;
        public TRom.UserEncryptKeyReq getReq() {
            return inReq;
        }
        public GetUserEncryptKeyResult setReq(TRom.UserEncryptKeyReq req) {
            this.inReq = req;
            return this;
        }

        TRom.UserEncryptKeyRsp outRsp;
        public TRom.UserEncryptKeyRsp getRsp() {
            return outRsp;
        }
        public GetUserEncryptKeyResult setRsp(TRom.UserEncryptKeyRsp rsp) {
            this.outRsp = rsp;
            return this;
        }

        int ret;
        public int getRet() {
             return ret;
        }
        public GetUserEncryptKeyResult setRet(int ret) {
            this.ret = ret;
            return this;
        }

    }

    public static interface IGetUserEncryptKeyCallback {
        public void onGetUserEncryptKeyCallback(GetUserEncryptKeyResult result);
    }

    private static abstract class GetUserEncryptKeyBaseMethod extends AsyncWupMethod {
        public GetUserEncryptKeyBaseMethod(String servantName, AsyncWupOption wupOption) {
            super(servantName, "getUserEncryptKey", wupOption);
        }

        TRom.UserEncryptKeyReq inReq;
        public TRom.UserEncryptKeyReq getReq() {
            return inReq;
        }
        public void setReq(TRom.UserEncryptKeyReq req) {
            this.inReq = req;
        }

        TRom.UserEncryptKeyRsp outRsp;
        public TRom.UserEncryptKeyRsp getRsp() {
            return outRsp;
        }

        int ret;
        public int getRet() {
             return ret;
        }

        @Override
        protected void fillReqUniPacket(UniPacket reqPacket) {
            reqPacket.put("req", inReq);
        }

        @Override
        protected void fillFieldsByUniPacket(UniPacket respPacket) {
            if (mWupOption.isUseUniPacketV3()) {
                ret = respPacket.getByClass("", Integer.valueOf(0));
                outRsp = respPacket.getByClass("rsp", new TRom.UserEncryptKeyRsp());
                return ;
            }
            ret = (Integer)respPacket.get("");
            outRsp = (TRom.UserEncryptKeyRsp)respPacket.get("rsp");
        }

    }

    private static class AsyncGetUserEncryptKeyMethod extends GetUserEncryptKeyBaseMethod {
        private IGetUserEncryptKeyCallback mGetUserEncryptKeyCallback;
        public AsyncGetUserEncryptKeyMethod(String servantName, AsyncWupOption wupOption, IGetUserEncryptKeyCallback getUserEncryptKeyCallback) {
            super(servantName, wupOption);
            this.mGetUserEncryptKeyCallback = getUserEncryptKeyCallback;
        }

        @Override
        protected void onError(int errorCode, String errorMsg) {
            GetUserEncryptKeyResult result = new GetUserEncryptKeyResult(errorCode, errorMsg);
            result.setRequestId(getRequestId());
            mGetUserEncryptKeyCallback.onGetUserEncryptKeyCallback(result);
        }

        @Override
        protected void onFinished() {
            GetUserEncryptKeyResult result = new GetUserEncryptKeyResult();
            result.setRequestId(getRequestId());
            result.setReq(getReq());
            result.setRsp(getRsp());
            result.setRet(getRet());
            mGetUserEncryptKeyCallback.onGetUserEncryptKeyCallback(result);
        }

    }

    private static class SyncGetUserEncryptKeyMethod extends GetUserEncryptKeyBaseMethod {
        private Semaphore mSemaphore;
        private WupException mWupException;
        public SyncGetUserEncryptKeyMethod(String servantName, AsyncWupOption wupOption) {
            super(servantName, wupOption);
            mSemaphore = new Semaphore(0);
        }

        public void waitResponse() throws InterruptedException {
            mSemaphore.acquire();
        }

        @Override
        protected void handleFinished() {
            mSemaphore.release();
        }

        @Override
        protected void handleError(final int errorCode, final String errorMsg) {
            mWupException = new WupException(errorCode, errorMsg);
            mSemaphore.release();
        }

        public WupException getWupException() {
            return mWupException;
        }

    }

    public WupHandle asyncGetUserEncryptKey(TRom.UserEncryptKeyReq inReq, IGetUserEncryptKeyCallback getUserEncryptKeyCallback) throws WupException { 
        return asyncGetUserEncryptKey(inReq, getUserEncryptKeyCallback, new AsyncWupOption(WupType.WUP_NORMAL_REQUEST));
    }

    public WupHandle asyncGetUserEncryptKey(TRom.UserEncryptKeyReq inReq, IGetUserEncryptKeyCallback getUserEncryptKeyCallback, AsyncWupOption option) throws WupException{
        if (getUserEncryptKeyCallback == null) {
            throw new IllegalArgumentException("getUserEncryptKeyCallback should not be null");
        }
        if (option == null) {
            throw new IllegalArgumentException("option should not be null");
        }

        if (inReq == null) {
            throw new IllegalArgumentException("inReq should not be null");
        }

        AsyncGetUserEncryptKeyMethod getUserEncryptKeyMethod = new AsyncGetUserEncryptKeyMethod(getServantName(), option, getUserEncryptKeyCallback);
        getUserEncryptKeyMethod.setReq(inReq);
        getUserEncryptKeyMethod.start();
        return new WupHandle(getUserEncryptKeyMethod);
    }

    public int getUserEncryptKey(TRom.UserEncryptKeyReq inReq, OutWrapper<TRom.UserEncryptKeyRsp> outRsp) throws WupException {
        return getUserEncryptKey(inReq, outRsp, new WupOption(WupOption.WupType.WUP_NORMAL_REQUEST));
    }

    public int getUserEncryptKey(TRom.UserEncryptKeyReq inReq, OutWrapper<TRom.UserEncryptKeyRsp> outRsp, WupOption option) throws WupException {
        if (option == null) {
            throw new IllegalArgumentException("option should not be null");
        }

        if (inReq == null) {
            throw new IllegalArgumentException("inReq should not be null");
        }

        if (outRsp == null) {
            throw new IllegalArgumentException("outRsp should not be null");
        }

        SyncGetUserEncryptKeyMethod syncGetUserEncryptKeyMethod = new SyncGetUserEncryptKeyMethod(getServantName(), new AsyncWupOption(option, null));
        syncGetUserEncryptKeyMethod.setReq(inReq);
        syncGetUserEncryptKeyMethod.start();

        try {
            syncGetUserEncryptKeyMethod.waitResponse();
        } catch (InterruptedException e) {
            throw new WupException(WUP_ERROR_CODE.WUP_INNER_ERROR, e.getMessage());
        }

        if (syncGetUserEncryptKeyMethod.getWupException() != null) {
            throw syncGetUserEncryptKeyMethod.getWupException();
        }

        outRsp.setOut(syncGetUserEncryptKeyMethod.getRsp());
        return syncGetUserEncryptKeyMethod.getRet();
    }

}

