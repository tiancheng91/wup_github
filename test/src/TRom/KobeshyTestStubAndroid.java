// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.2.1.4 by WSRD Tencent.
// Generated from `KobeshyTest.jce'
// **********************************************************************

package TRom;

import java.util.concurrent.Semaphore;
import qrom.component.wup.QRomWupConstants.WUP_ERROR_CODE;
import qrom.component.wup.apiv2.AsyncWupMethod;
import qrom.component.wup.apiv2.AsyncWupOption;
import qrom.component.wup.apiv2.OutWrapper;
import qrom.component.wup.apiv2.WupBaseResult;
import qrom.component.wup.apiv2.WupException;
import qrom.component.wup.apiv2.WupHandle;
import qrom.component.wup.apiv2.WupOption;
import qrom.component.wup.apiv2.WupOption.WupType;
import com.qq.jce.wup.UniPacket;

public class KobeshyTestStubAndroid {

    private String mServantName;
    public KobeshyTestStubAndroid(String servantName) {
        this.mServantName = servantName;
    }

    public String getServantName() {
        return mServantName;
    }

    public static class GetKobeResult extends WupBaseResult {
        public GetKobeResult() {
        }

        public GetKobeResult(int errorCode, String errorMsg) {
            super(errorCode, errorMsg);
        }

        TRom.GetKobeReq inReq;
        public TRom.GetKobeReq getReq() {
            return inReq;
        }
        public GetKobeResult setReq(TRom.GetKobeReq req) {
            this.inReq = req;
            return this;
        }

        TRom.GetKobeRsp outRsp;
        public TRom.GetKobeRsp getRsp() {
            return outRsp;
        }
        public GetKobeResult setRsp(TRom.GetKobeRsp rsp) {
            this.outRsp = rsp;
            return this;
        }

        int ret;
        public int getRet() {
             return ret;
        }
        public GetKobeResult setRet(int ret) {
            this.ret = ret;
            return this;
        }

    }

    public static interface IGetKobeCallback {
        public void onGetKobeCallback(GetKobeResult result);
    }

    private static abstract class GetKobeBaseMethod extends AsyncWupMethod {
        public GetKobeBaseMethod(String servantName, AsyncWupOption wupOption) {
            super(servantName, "getKobe", wupOption);
        }

        TRom.GetKobeReq inReq;
        public TRom.GetKobeReq getReq() {
            return inReq;
        }
        public void setReq(TRom.GetKobeReq req) {
            this.inReq = req;
        }

        TRom.GetKobeRsp outRsp;
        public TRom.GetKobeRsp getRsp() {
            return outRsp;
        }

        int ret;
        public int getRet() {
             return ret;
        }

        @Override
        protected void fillReqUniPacket(UniPacket reqPacket) {
            reqPacket.put("req", inReq);
        }

        @Override
        protected void fillFieldsByUniPacket(UniPacket respPacket) {
            if (mWupOption.isUseUniPacketV3()) {
                ret = respPacket.getByClass("", Integer.valueOf(0));
                outRsp = respPacket.getByClass("rsp", new TRom.GetKobeRsp());
                return ;
            }
            ret = (Integer)respPacket.get("");
            outRsp = (TRom.GetKobeRsp)respPacket.get("rsp");
        }

    }

    private static class AsyncGetKobeMethod extends GetKobeBaseMethod {
        private IGetKobeCallback mGetKobeCallback;
        public AsyncGetKobeMethod(String servantName, AsyncWupOption wupOption, IGetKobeCallback getKobeCallback) {
            super(servantName, wupOption);
            this.mGetKobeCallback = getKobeCallback;
        }

        @Override
        protected void onError(int errorCode, String errorMsg) {
            GetKobeResult result = new GetKobeResult(errorCode, errorMsg);
            result.setRequestId(getRequestId());
            mGetKobeCallback.onGetKobeCallback(result);
        }

        @Override
        protected void onFinished() {
            GetKobeResult result = new GetKobeResult();
            result.setRequestId(getRequestId());
            result.setReq(getReq());
            result.setRsp(getRsp());
            result.setRet(getRet());
            mGetKobeCallback.onGetKobeCallback(result);
        }

    }

    private static class SyncGetKobeMethod extends GetKobeBaseMethod {
        private Semaphore mSemaphore;
        private WupException mWupException;
        public SyncGetKobeMethod(String servantName, AsyncWupOption wupOption) {
            super(servantName, wupOption);
            mSemaphore = new Semaphore(0);
        }

        public void waitResponse() throws InterruptedException {
            mSemaphore.acquire();
        }

        @Override
        protected void handleFinished() {
            mSemaphore.release();
        }

        @Override
        protected void handleError(final int errorCode, final String errorMsg) {
            mWupException = new WupException(errorCode, errorMsg);
            mSemaphore.release();
        }

        public WupException getWupException() {
            return mWupException;
        }

    }

    public WupHandle asyncGetKobe(TRom.GetKobeReq inReq, IGetKobeCallback getKobeCallback) throws WupException { 
        return asyncGetKobe(inReq, getKobeCallback, new AsyncWupOption(WupType.WUP_NORMAL_REQUEST));
    }

    public WupHandle asyncGetKobe(TRom.GetKobeReq inReq, IGetKobeCallback getKobeCallback, AsyncWupOption option) throws WupException{
        if (getKobeCallback == null) {
            throw new IllegalArgumentException("getKobeCallback should not be null");
        }
        if (option == null) {
            throw new IllegalArgumentException("option should not be null");
        }

        if (inReq == null) {
            throw new IllegalArgumentException("inReq should not be null");
        }

        AsyncGetKobeMethod getKobeMethod = new AsyncGetKobeMethod(getServantName(), option, getKobeCallback);
        getKobeMethod.setReq(inReq);
        getKobeMethod.start();
        return new WupHandle(getKobeMethod);
    }

    public int getKobe(TRom.GetKobeReq inReq, OutWrapper<TRom.GetKobeRsp> outRsp) throws WupException {
        return getKobe(inReq, outRsp, new WupOption(WupOption.WupType.WUP_NORMAL_REQUEST));
    }

    public int getKobe(TRom.GetKobeReq inReq, OutWrapper<TRom.GetKobeRsp> outRsp, WupOption option) throws WupException {
        if (option == null) {
            throw new IllegalArgumentException("option should not be null");
        }

        if (inReq == null) {
            throw new IllegalArgumentException("inReq should not be null");
        }

        if (outRsp == null) {
            throw new IllegalArgumentException("outRsp should not be null");
        }

        SyncGetKobeMethod syncGetKobeMethod = new SyncGetKobeMethod(getServantName(), new AsyncWupOption(option, null));
        syncGetKobeMethod.setReq(inReq);
        syncGetKobeMethod.start();

        try {
            syncGetKobeMethod.waitResponse();
        } catch (InterruptedException e) {
            throw new WupException(WUP_ERROR_CODE.WUP_INNER_ERROR, e.getMessage());
        }

        if (syncGetKobeMethod.getWupException() != null) {
            throw syncGetKobeMethod.getWupException();
        }

        outRsp.setOut(syncGetKobeMethod.getRsp());
        return syncGetKobeMethod.getRet();
    }

}

